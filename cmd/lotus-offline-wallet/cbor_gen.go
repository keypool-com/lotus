// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package main

import (
	"fmt"
	"io"

	api "github.com/filecoin-project/lotus/api"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf

var lengthBufUnsignedMessage = []byte{131}

func (t *UnsignedMessage) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufUnsignedMessage); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Address (address.Address) (struct)
	if err := t.Address.MarshalCBOR(w); err != nil {
		return err
	}

	// t.ToSign ([]uint8) (slice)
	if len(t.ToSign) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.ToSign was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.ToSign))); err != nil {
		return err
	}

	if _, err := w.Write(t.ToSign[:]); err != nil {
		return err
	}

	// t.Meta (main.Meta) (struct)
	if err := t.Meta.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *UnsignedMessage) UnmarshalCBOR(r io.Reader) error {
	*t = UnsignedMessage{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Address (address.Address) (struct)

	{

		if err := t.Address.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Address: %w", err)
		}

	}
	// t.ToSign ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.ToSign: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.ToSign = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.ToSign[:]); err != nil {
		return err
	}
	// t.Meta (main.Meta) (struct)

	{

		if err := t.Meta.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Meta: %w", err)
		}

	}
	return nil
}

var lengthBufSignedMessage = []byte{130}

func (t *SignedMessage) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufSignedMessage); err != nil {
		return err
	}

	// t.UnsignedMessage (main.UnsignedMessage) (struct)
	if err := t.UnsignedMessage.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Signature (crypto.Signature) (struct)
	if err := t.Signature.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *SignedMessage) UnmarshalCBOR(r io.Reader) error {
	*t = SignedMessage{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.UnsignedMessage (main.UnsignedMessage) (struct)

	{

		if err := t.UnsignedMessage.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.UnsignedMessage: %w", err)
		}

	}
	// t.Signature (crypto.Signature) (struct)

	{

		if err := t.Signature.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Signature: %w", err)
		}

	}
	return nil
}

var lengthBufMeta = []byte{130}

func (t *Meta) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufMeta); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Type (api.MsgType) (string)
	if len(t.Type) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Type was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Type))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Type)); err != nil {
		return err
	}

	// t.Extra ([]uint8) (slice)
	if len(t.Extra) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Extra was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Extra))); err != nil {
		return err
	}

	if _, err := w.Write(t.Extra[:]); err != nil {
		return err
	}
	return nil
}

func (t *Meta) UnmarshalCBOR(r io.Reader) error {
	*t = Meta{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Type (api.MsgType) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.Type = api.MsgType(sval)
	}
	// t.Extra ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Extra: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Extra = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.Extra[:]); err != nil {
		return err
	}
	return nil
}
